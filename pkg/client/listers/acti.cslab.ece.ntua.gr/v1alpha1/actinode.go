/*
  Copyright 2022 Christos Katsakioris

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ckatsak/acticrds-go/pkg/apis/acti.cslab.ece.ntua.gr/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ActiNodeLister helps list ActiNodes.
// All objects returned here must be treated as read-only.
type ActiNodeLister interface {
	// List lists all ActiNodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ActiNode, err error)
	// ActiNodes returns an object that can list and get ActiNodes.
	ActiNodes(namespace string) ActiNodeNamespaceLister
	ActiNodeListerExpansion
}

// actiNodeLister implements the ActiNodeLister interface.
type actiNodeLister struct {
	indexer cache.Indexer
}

// NewActiNodeLister returns a new ActiNodeLister.
func NewActiNodeLister(indexer cache.Indexer) ActiNodeLister {
	return &actiNodeLister{indexer: indexer}
}

// List lists all ActiNodes in the indexer.
func (s *actiNodeLister) List(selector labels.Selector) (ret []*v1alpha1.ActiNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActiNode))
	})
	return ret, err
}

// ActiNodes returns an object that can list and get ActiNodes.
func (s *actiNodeLister) ActiNodes(namespace string) ActiNodeNamespaceLister {
	return actiNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ActiNodeNamespaceLister helps list and get ActiNodes.
// All objects returned here must be treated as read-only.
type ActiNodeNamespaceLister interface {
	// List lists all ActiNodes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ActiNode, err error)
	// Get retrieves the ActiNode from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ActiNode, error)
	ActiNodeNamespaceListerExpansion
}

// actiNodeNamespaceLister implements the ActiNodeNamespaceLister
// interface.
type actiNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ActiNodes in the indexer for a given namespace.
func (s actiNodeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ActiNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActiNode))
	})
	return ret, err
}

// Get retrieves the ActiNode from the indexer for a given namespace and name.
func (s actiNodeNamespaceLister) Get(name string) (*v1alpha1.ActiNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("actinode"), name)
	}
	return obj.(*v1alpha1.ActiNode), nil
}
